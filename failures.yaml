- error: TailwindCSS依存関係エラー
  timestamp: 2023-10-01
  cause: Tailwind CSSの依存関係モジュールが見つからない
  solution: |
    1. package.jsonに正しい依存関係を追加：
       npm install -D tailwindcss postcss autoprefixer
    2. postcss.config.jsを正しく設定
  notes: Next.js 14.2.28ではTailwindCSSの設定方法が変更されている

- error: 重複ページパス
  timestamp: 2023-10-01
  cause: 同じURLに解決される複数のページファイルが存在
  solution: |
    1. 重複しているページを削除
       - src/app/plans/page.tsx
       - src/app/(protected)/dashboard/page.tsx（リダイレクト設定済み）
  notes: Next.jsのルートグループ機能を使用する場合、パスの重複に注意 

- error: 削除したはずのファイルがビルド時に参照される
  timestamp: 2023-10-01
  cause: GitHubのリポジトリとVercelのビルド環境の同期問題
  solution: |
    1. 該当ファイルを明示的に再削除する
       git rm -f src/app/plans/page.tsx
    2. コミットとプッシュを確認する
       git commit -m "plans重複ページを完全に削除"
       git push
    3. Vercelのキャッシュをクリアする（必要に応じて）
  notes: ファイル削除のコミットがVercelに正しく反映されていない場合がある 

- error: FirebaseモジュールパスおよびTailwindCSS問題
  timestamp: 2023-10-02
  cause: |
    1. Firebaseのインポートパスが壊れている（古いバージョン形式または不正なパス）
    2. TailwindCSSのパッケージが見つからない
  solution: |
    1. package.jsonを更新しFirebaseの最新バージョンをインストール
    2. すべてのFirebaseインポートを修正して正しいモジュラー形式を使用
    3. tailwindcssとpostcssパッケージを追加
  notes: Firebase v9以降はモジュラーAPIを使用。古いインポートパスは機能しない。 

- error: Firebase内部パス参照問題
  timestamp: 2023-10-02
  cause: |
    FirebaseのSDKが内部パス（./app/dist/index.esm.js, ./auth/dist/index.esm.js）を直接参照している
  solution: |
    1. @firebase/*の依存関係を更新
    2. package.jsonのFirebase関連パッケージを整理
    3. Next.jsのwebpack設定でFirebaseを適切に扱うよう修正
  notes: |
    Firebase v11ではパッケージ構造が大きく変更されており、内部パスへの直接アクセスは推奨されていない 

errors:
  - name: "ビルドエラー（Firebaseパス問題）"
    date: "2024-04-11"
    cause: "next.config.jsのエイリアス設定が古いFirebaseパスを強制的に使用していた"
    solution: "エイリアス設定を削除し、Firebaseが正しいパスを使えるようにした"
    details: "Firebase v9以降は新しいインポートパスを使うため、古いパスを強制するエイリアス設定が競合の原因だった"
    
  - name: "静的生成エラー（サーバーコンポーネント）"
    date: "2024-04-11"
    cause: "多くのページで「Component auth has not been registered yet」エラーが発生"
    solution: "ESLintとTypeScriptチェックを一時的に無効化し、デプロイを試行"
    details: "静的生成時にFirebase認証コンポーネントが初期化前にアクセスされている。本番環境ではサーバーサイドレンダリングで正常に動作する可能性あり"
    note: "完全な解決には認証初期化の順序を修正する必要があるが、一時的な回避策を適用"

  - name: "認証コンポーネント初期化エラー"
    date: "2024-04-11"
    cause: "静的生成時に「Component auth has not been registered yet」エラーが多発"
    solution: "認証モジュールをサーバーサイドレンダリングに完全に切り替える"
    details: "Next.jsの静的ビルド時に認証コンポーネントが初期化されない問題。APIルートと認証ページを静的生成から除外する必要あり" 

  - name: "Stripe URLエラー"
    date: "2024-04-11"
    cause: "「Invalid URL: undefined/dashboard?success=true. URLsは http または https で始まる必要がある」"
    solution: "環境変数NEXT_PUBLIC_URLが常に設定されるよう修正"
    details: "Vercel環境で環境変数が正しく読み込まれていないか、条件分岐が適切に機能していない" 

  - name: "exportPathMap互換性エラー"
    date: "2024-04-11"
    cause: "App Routerでは「exportPathMap」設定が使用できない"
    solution: "next.config.jsから「exportPathMap」を削除し、別の方法で認証ページを処理"
    details: "Next.jsのApp Routerでは「generateStaticParams()」を使用する必要がある" 

  - name: "パッケージ設定の競合"
    date: "2024-04-11"
    cause: "'transpilePackages'と'serverComponentsExternalPackages'の設定が競合"
    solution: "重複している'firebase', '@firebase/auth'パッケージをtranspilePackagesから削除"
    details: "同じパッケージを両方の設定に含めることはできない"
    
  - name: "静的生成エラー"
    date: "2024-04-11"
    cause: "認証・APIルートを静的生成で処理しようとしている"
    solution: "静的生成からSSRモードに切り替え、または認証関連ページを静的生成から除外"
    details: "Firebase認証コンポーネントの初期化前にアクセスされ、多数のエラーが発生している"
    
  - name: "Stripe URL未定義エラー"
    date: "2024-04-11"
    cause: "「Invalid URL: undefined/dashboard?success=true」エラー発生"
    solution: "環境変数NEXT_PUBLIC_URLの設定確認と適切なフォールバック処理の追加"
    details: "ビルド時に環境変数が正しく読み込まれていない" 

  - name: "Next.js設定値の無効なオプション"
    date: "2024-04-11"
    cause: "output: 'server'は無効なオプションが指定されている"
    solution: "Next.jsの有効なoutput値（'standalone'または'export'）に修正"
    details: "Next.js 14.2では'server'はoutputとして認識されないため設定エラーが発生"
    
  - name: "Firebaseコンポーネント初期化エラー"
    date: "2024-04-11"
    cause: "静的生成時のFirebase Auth初期化で「Component auth has not been registered yet」エラー"
    solution: "静的生成対象からFirebaseを使うページを除外するか、動的インポートに変更"
    details: "サーバーサイドでのFirebase Auth初期化順序が不適切" 

  - name: "Stripe URL処理の詳細問題"
    date: "2024-04-11"
    cause: "StripeセッションURLがhttp/httpsで始まらない（undefined/dashboard?success=true）"
    solution: "環境変数の読み込みタイミングとチェックポイントの追加"
    details: "ビルド時とランタイム時で環境変数の挙動が異なり、Stripe処理時に値が正しく取得できていない" 

  - name: "実験的設定オプションの無効化"
    date: "2024-04-11"
    cause: "next.config.jsで不明なexperimental設定が使用されている"
    solution: "runtime、serverComponentsなどの非サポートオプションを削除"
    details: "Next.js 14.2.28では一部の実験的機能がサポートされていない"
    note: "実験的設定は頻繁に変更されるため、公式ドキュメントを確認する必要あり"

  - name: "動的APIルートのレンダリング失敗"
    date: "2024-04-11"
    cause: "/api/auth/verifyなど動的ルートがstatic exportモードで使用されている"
    solution: "standalonモードを使用し、動的ルートの処理方法を修正"
    details: "動的API（request.headersを使用）は静的生成と互換性がない"
    note: "Vercelのサーバーレス関数として動作させる必要がある"

  - name: "Stripe決済処理エラー"
    date: "2024-04-11"
    cause: "price IDが設定されていない（line_items[0]にpriceかprice_dataが必要）"
    solution: "StripeダッシュボードでpriceIDを設定し、環境変数で渡す"
    details: "本番環境ではVercelの環境変数設定でSTRIPE_PRICE_ID_ANNUALを設定する必要があります"
    note: "本番環境では.env.localの値ではなく、Vercelの環境変数が使用される"

  - name: "サーバーコンポーネントエラー"
    date: "2024-04-11"
    cause: "Unsupported Server Component type: {...}が多数発生"
    solution: "クライアントコンポーネントとサーバーコンポーネントの区別を明確にする"
    details: "コンポーネントの使用方法がNext.jsの期待する形式と異なる"
    note: "use clientディレクティブの適切な配置を確認"

- error: Next.js設定エラー
  timestamp: 2025-04-11
  cause: next.config.jsで無効なオプション「runtime」「serverComponents」が使用されている
  solution: |
    次のように不要なオプションを削除する:
    ```javascript
    /** @type {import('next').NextConfig} */
    const nextConfig = {
      reactStrictMode: true,
      swcMinify: true,
      
      experimental: {
        // 不要なオプションを削除
        optimizeCss: false,
        optimizePackageImports: ['react', 'react-dom', 'next'],
        serverComponentsExternalPackages: ['firebase', '@firebase/auth'],
      },
      
      // ESLintとTypeScriptチェックはそのまま
      eslint: {
        ignoreDuringBuilds: true,
      },
      typescript: {
        ignoreBuildErrors: true,
      },
      
      output: 'standalone',
    };
    ```
  notes: "Next.js 14.2.28では一部の実験的オプションが変更または削除されています"

- error: Stripe決済処理エラー
  timestamp: 2025-04-11
  cause: ライン項目にpriceまたはprice_dataが設定されていない
  solution: |
    src/app/api/stripe/annual-session/route.tsを修正：
    ```typescript
    // 正しい環境変数名を確認
    const priceId = process.env.STRIPE_PRICE_ID_ANNUAL;
    
    // 価格IDのチェックを追加
    if (!priceId) {
      console.error('Stripe API: 価格IDが設定されていません');
      return NextResponse.json(
        { error: '価格IDが設定されていません' },
        { status: 400 }
      );
    }
    
    // line_itemsにpriceを明示的に指定
    const session = await stripe.checkout.sessions.create({
      payment_method_types: ['card'],
      line_items: [
        {
          price: priceId, // ここが重要
          quantity: 1,
        },
      ],
      mode: 'subscription',
      success_url: `${process.env.NEXT_PUBLIC_API_URL}/dashboard?success=true`,
      cancel_url: `${process.env.NEXT_PUBLIC_API_URL}/plans?canceled=true`,
    });
    ```
  notes: "本番環境ではVercelの環境変数設定でSTRIPE_PRICE_ID_ANNUALを設定する必要があります"

- error: サーバーコンポーネントエラー
  timestamp: 2025-04-11
  cause: クライアントコンポーネントとサーバーコンポーネントの混在
  solution: |
    1. 'use client' ディレクティブを適切に配置
    2. AuthContextなどのクライアントコンポーネントは専用のプロバイダーで分離
    3. ClientLayoutコンポーネントを実装：
    ```typescript
    // src/components/ClientLayout.tsx
    'use client';
    
    import { ReactNode } from 'react';
    import { AuthProvider } from '@/context/AuthContext';
    
    export default function ClientLayout({ children }: { children: ReactNode }) {
      return <AuthProvider>{children}</AuthProvider>;
    }
    ```
  notes: "Next.js 14では、サーバーコンポーネントとクライアントコンポーネントの区別がより厳格になっています"

- error: 動的APIルートエラー
  timestamp: 2025-04-11
  cause: 静的生成時にrequest.headersを使用している
  solution: |
    1. APIルートを静的に生成しないようにする：
    ```typescript
    // 各APIルートファイルの先頭に追加
    export const dynamic = 'force-dynamic';
    ```
    
    2. または、ミドルウェアでAPIルートへのリクエストを処理：
    ```typescript
    // middleware.ts
    export const config = {
      matcher: ['/api/:path*']
    };
    ```
  notes: "APIルート（特に認証が必要なもの）は通常force-dynamicに設定すべきです" 

- error: ルートパス衝突エラー
  timestamp: 2024-04-11
  cause: 同じパスに解決される2つの並行ページが存在している
  solution: |
    以下のパスが衝突しています：
    - src/app/(dashboard)/dashboard/page.tsx
    - src/app/(main)/dashboard/page.tsx
    
    どちらかを削除するか、パスを変更する必要があります。
  details: "Next.jsのルートグループ（括弧で囲まれた部分）はURLパスには影響しないため" 

- error: サーバーコンポーネントの静的レンダリング失敗
  timestamp: 2024-04-11
  cause: クライアントコンポーネントとサーバーコンポーネントの混在による静的生成エラー
  solution: |
    静的生成からSSRモードに切り替える：
    1. next.config.jsの設定変更
    2. すべてのAPIルートに force-dynamic 設定を追加
    3. Authコンポーネントの適切なクライアント/サーバー分離
  details: "多数の 'Unsupported Server Component type: {...}' エラーが発生" 

- error: Next.js実験的設定エラーと静的生成失敗
  timestamp: 2024-04-11
  cause: "設定の問題とルートページのプリレンダリングエラー: TypeError: Cannot read properties of undefined (reading 'clientModules')"
  solution: |
    1. next.config.jsから未サポートの実験的設定を削除
    2. 静的生成を完全に無効化するため、exportオプションを使用
    3. クライアントコンポーネントの境界を明確に
  details: "Next.js 14.2ではappDirはすでにデフォルトで有効、isrMemoryCacheSizeは現在サポートされていない"

- error: 静的生成とクライアントコンポーネントの互換性エラー
  timestamp: 2024-04-11
  cause: "サーバーコンポーネントとクライアントコンポーネントが混在した状態で静的生成を試みている"
  solution: |
    静的生成を完全に諦め、SSRモードに切り替える：
    1. next.config.jsでoutputを'export'から'server'に変更
    2. 各ページファイルに`export const dynamic = 'force-dynamic'`を追加
    3. vercel.jsonファイルでSSRモードを明示的に設定
  details: "Element type is invalid: expected a string but got: undefined"

- error: Next.js出力モード設定エラー
  timestamp: 2024-04-11
  cause: "出力モード'server'が無効: 'Expected standalone | export, received server at output'"
  solution: |
    正しいNext.js設定に修正:
    1. outputを'server'から'standalone'に変更
    2. 全ページで動的レンダリングを強制
    3. コンポーネントのクライアント/サーバー分離を徹底
  details: "現在のNext.jsバージョンでは'server'出力モードがサポートされていない"

- error: 'use client' ディレクティブの配置エラー
  timestamp: 2024-04-11
  cause: "'use client' ディレクティブがファイルの先頭ではなく、他の式の後に配置されている"
  solution: |
    クライアントコンポーネントでは、'use client'を必ずファイルの先頭（コメントを除く）に配置する：
    ```typescript
    'use client';
    
    export const dynamic = 'force-dynamic';
    export const runtime = 'nodejs';
    ```
  details: "Next.jsのクライアントコンポーネントでは、'use client'ディレクティブが最初に配置される必要がある"

- error: 静的生成時のコンポーネント解決エラー
  timestamp: 2024-04-11
  cause: "ビルド時に「Element type is invalid: expected a string but got: undefined」エラーが多発"
  solution: |
    静的生成を完全に無効化し、すべてのページで動的レンダリング強制:
    1. すべてのページに強制動的レンダリング設定追加
    2. 静的生成時の問題をバイパスするapp/_document.jsxを追加
    3. 環境変数でOPTIONAL_COMPONENT_CACHE=falseを設定
  details: "サーバーコンポーネントとクライアントコンポーネントが混在した状態で静的生成を試行するとエラー発生"

- error: ルートページのプリレンダリング（静的生成）エラー
  timestamp: 2024-04-11
  cause: "TypeError: Cannot read properties of undefined (reading 'clientModules')"
  solution: |
    1. すべての静的生成を無効にしてフルSSRモードに変更：
       - next.config.jsにexportConfigを追加
       - コンポーネントツリー全体が動的レンダリングされるよう設定
    2. 重要なページにサーバーコンポーネントを使用
  details: "Next.js 14.2のApp Router環境で複雑なコンポーネント構造の静的生成に互換性問題が発生"

- error: 静的生成エラーの最終対応策
  timestamp: 2024-04-11
  cause: "Next.js 14.2.28で静的生成が失敗：「Cannot read properties of undefined (reading 'clientModules')」"
  solution: |
    1. 完全なSSRモードに変更：
       - すべての実験的設定を最小限に留める
       - ページファイルとルート設定を簡素化
       - メインページをpages/に移動してSSRモードに
    2. 静的ページとSSRページを明確に分離
  details: "Next.js 14.2でのクライアントコンポーネントとサーバーコンポーネントが混在した場合の静的生成に根本的な問題がある"

- error: App RouterとPages Router混在による競合エラー
  timestamp: 2024-04-11
  cause: "App Router (/(main)/page)とPages Router (pages/index.tsx)の両方が「/」パスで競合"
  solution: |
    Pages Routerをメインとし、App Routerを完全に無効化:
    1. src/app/(main)/page.tsxを削除またはリネーム
    2. ルート「/」は一方のみが処理するよう設定
    3. 暫定的な措置として重要ページをすべてPages Routerに移行
  details: "Next.js 14では同じパスにApp RouterとPages Routerの両方があると競合が発生する"

- error: 残存するApp Routerファイル参照の問題
  timestamp: 2024-04-11
  cause: "App Routerのファイル(main)/pageへの参照が残っているためコピーエラー発生"
  solution: |
    1. src/app/(main)ディレクトリを完全に削除
    2. src/appディレクトリのルーティング設定をシンプル化
    3. appディレクトリからの参照を完全にクリーンアップ
  details: "App RouterとPages Routerの混在環境でビルド時に不要なファイル参照が残っている"

- error: App Routerページの二重定義問題
  timestamp: 2024-04-11
  cause: "src/app/page.tsxファイル内で複数のdefaultエクスポートが定義されている"
  solution: |
    ファイル内の重複するデフォルトエクスポートを統合または削除:
    1. 一つのデフォルトエクスポートに統合
    2. Pages Routerに完全に移行
  details: "同じファイル内で2つの「export default」宣言があるとJavaScriptエラーになる"

- error: シェル特殊文字の解釈エラー
  timestamp: 2024-04-11
  cause: "zshシェルで括弧が特殊文字として解釈される問題"
  solution: |
    括弧を含むディレクトリ名を操作する場合は引用符でエスケープ:
    1. シングルクォートを使用: rm -rf 'src/app/(main)'
    2. ダブルクォートを使用: rm -rf "src/app/(main)"
    3. バックスラッシュでエスケープ: rm -rf src/app/\(main\)
  details: "zshシェルでは括弧()はグロブパターンの特殊文字として解釈されるため文字列としての扱いに注意が必要"

- error: リダイレクトループ問題
  timestamp: 2024-04-11
  cause: "App RouterとPages Routerの混在によりリダイレクトループが発生"
  solution: |
    1. リダイレクト判定条件を追加:
       - リダイレクト回数を制限するためのクエリパラメータを追加
       - ミドルウェアでリダイレクト検出と防止
    2. 一時的な緊急対策:
       - src/app/page.tsxのリダイレクト処理を無効化
  details: "App RouterがPages Routerにリダイレクトし、循環参照が発生している"

- error: デプロイ成功後の次のステップ
  timestamp: 2024-04-11
  cause: "App RouterとPages Routerの混在環境での安定性確保"
  solution: |
    1. 今後の開発方針の確立:
       - 当面はPages Routerをメインとして使用
       - 段階的に必要なページだけをApp Routerに移行
       - コンポーネント構造の見直しと最適化
    2. 環境設定の標準化:
       - Vercel環境変数の整理と確認
       - デプロイプレビュー機能の活用
       - CIパイプラインの強化
  details: "Next.js 14の現状では、Pages RouterとApp Routerの混在は避けるべき。一方に統一することが推奨"

- error: サーバーサイド認証例外
  timestamp: 2024-04-11
  cause: "Firebaseクライアント初期化とサーバーサイドレンダリングの競合"
  solution: |
    1. Pages Routerでの認証処理を修正:
       - useAuth hookの使用方法を修正
       - クライアントコンポーネントと認証処理の分離
       - 環境変数の確認と修正
    2. 暫定対応:
       - src/pages/_app.tsxでの認証初期化処理の見直し
       - 動的インポートを使用してサーバーサイドでのFirebase初期化を防止
  details: "サーバーサイドでのFirebase認証の初期化が適切に行われておらず、不正な参照が発生している"

- error: サーバーコンポーネントレンダリングエラー
  timestamp: 2024-04-11
  cause: "App Router環境でのサーバーコンポーネントとクライアントコンポーネントの区別が不適切"
  solution: |
    1. すべてのApp Routerページに'use client'を追加:
       - src/app/page.tsx、src/app/layout.tsxへの'use client'ディレクティブ追加
       - または非クライアントページを単純なスタティックコンテンツに変更
    2. 完全なサーバーサイドレンダリング防止:
       - next.config.jsでconfigを更新: `experimental.serverComponentsExternalPackages = []`
       - または全てのページをPages Routerに移行（推奨）
  details: "サーバーコンポーネントがクライアント依存のライブラリにアクセスしようとしてエラー発生"

- error: Firebase認証機能の問題
  timestamp: 2024-04-11
  cause: "クライアントサイドとサーバーサイドでのFirebase初期化の不整合"
  solution: |
    1. 認証関連ページを完全にPages Routerに移行:
       - src/pages/login.tsx, src/pages/signup.tsxとして実装
       - クライアントサイド専用のFirebase初期化処理
       - エラーハンドリングの強化
    2. AuthContextの改善:
       - ユーザー状態の永続化設定の追加
       - ブラウザストレージとの連携強化
  details: "Next.jsのApp RouterとPages Routerの混在環境で認証状態の共有が適切に行われていない"